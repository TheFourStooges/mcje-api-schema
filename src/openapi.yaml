openapi: 3.0.0

###################################
# MCJE API
# 2021-10-15
# Phan Cong Minh (@pcminh)
###################################

info:
  description: |
    This is the OAS document for MCJE Common API
  version: "1.0.0"
  title: Common API for Mimililu & Co. Jewelry E-commerce
  termsOfService: 'http://swagger.io/terms/'
  contact:
    name: Phan CÃ´ng Minh
    email: pcminh01@gmail.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/thefourstooges/mcje-api/1.0.0
tags:
  - name: product
    description: Products for sale on MCJE
  - name: product_type
    description: Product Type/Class
  - name: category
    description: Groups of products
  - name: asset
    description: Audio/Video/Image asset of a product
  - name: store
    description: Access to Petstore orders
  - name: user
    description: Operations about user
    externalDocs:
      description: Find out more about our store
      url: 'http://swagger.io'
paths:
  ## PRODUCTS & PRODUCT OPTION GROUPS
  /product:
    # Create Product
    post:
      tags:
        - product
      summary: Add a new active product to the store
      operationId: addProduct
      responses:
        '200':
          description: successful add operation
          content:
            "*/*":
              schema:
                $ref: '#/components/schemas/Product'
        '405':
          $ref: '#/components/responses/IllegalInput'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      requestBody:
        $ref: '#/components/requestBodies/Product'
      security:
        - jwt_bearer: []
    # Get multiple Products
    get:
      tags:
        - product
      summary: Get a list of active products
      operationId: getProducts
      parameters:
        - $ref: '#/components/parameters/limit'
        - name: category_slug
          in: query
          description: filter by array of category slugs. all values must apply to the product
          required: false
          schema:
            type: array
            items:
              type: string
          style: form
          explode: false
        - name: category_id
          in: query
          description: filter by array of category ids. all values must apply to the product
          required: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/RecordId'
          style: form
          explode: false
        - $ref: '#/components/parameters/query'
        - name: active
          in: query
          description: filter products by their active status. retail users will not see inactive products
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: successful operation
          content:
            "*/*":
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
                  meta:
                    type: object
                    properties:
                      pagination:
                        $ref: '#/components/schemas/MetaPagination'
        '405':
          $ref: '#/components/responses/IllegalInput'
  /product/{identifier}:
    # Get Product
    get:
      tags:
        - product
      summary: Get a specific product
      operationId: getProduct
      parameters:
        - $ref: '#/components/parameters/identifier'
      responses:
        '200':
          description: successful get operation
          content:
            "*/*":
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: product with provided id not found
    # Update Product
    put:
      tags:
        - product
      summary: Update a specific product
      operationId: updateProduct
      parameters:
        - $ref: '#/components/parameters/identifier'
      requestBody:
        $ref: '#/components/requestBodies/Product'
      responses:
        '200':
          description: successful update operation
          content:
            "*/*":
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: product with provided id not found
      security:
        - jwt_bearer: []
    # Delete Product
    delete:
      tags:
        - product
      summary: Delete a specific product record
      operationId: deleteProduct
      parameters:
        - $ref: '#/components/parameters/identifier'
      responses:
        '200':
          description: successful delete operation
          content:
            "*/*":
              schema:
                type: object
                properties:
                  id:
                    $ref: '#/components/schemas/RecordId'
                  deleted:
                    type: boolean
                    default: true
      security:
        - jwt_bearer: []
  /product/{identifier}/option_group:
    # Create option group for product
    post:
      tags:
        - product
      summary: Create option group for product
      operationId: addProductOptionGroup
      parameters:
        - $ref: '#/components/parameters/identifier'
      responses:
        '200':
          description: successful add operation
          content:
            "*/*":
              schema:
                $ref: '#/components/schemas/ProductOptionGroup'
        '405':
          $ref: '#/components/responses/IllegalInput'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      requestBody:
        $ref: '#/components/requestBodies/ProductOptionGroup'
      security:
        - jwt_bearer: []
    # List multiple option groups for product
    get:
      tags:
        - product
      summary: Get a list of option groups for a specific product
      operationId: getProductOptionGroups
      responses:
        '200':
          description: successful operation
          content:
            "*/*":
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ProductOptionGroup'
                  meta:
                    type: object
                    properties:
                      pagination:
                        $ref: '#/components/schemas/MetaPagination'
        '405':
          $ref: '#/components/responses/IllegalInput'
  /product/{identifier}/option_group/{group_id}:
    # Get a specific variant group for product
    get:
      tags:
        - product
      summary: Get a specific option group of a product
      operationId: getProductOptionGroup
      parameters:
        - $ref: '#/components/parameters/identifier'
        - name: group_id
          in: path
          description: id of the option group
          required: true
          schema:
            $ref: '#/components/schemas/RecordId'
      responses:
        '200':
          description: successful get operation
          content:
            "*/*":
              schema:
                $ref: '#/components/schemas/ProductOptionGroup'
        '404':
          description: product with provided id not found
    # Update a specific option group of a product
    put:
      tags:
        - product
      summary: Update a specific option group of a product
      operationId: updateProductOptionGroup
      parameters:
        - $ref: '#/components/parameters/identifier'
        - name: group_id
          in: path
          description: id of the option group
          required: true
          schema:
            $ref: '#/components/schemas/RecordId'
      requestBody:
        $ref: '#/components/requestBodies/ProductOptionGroup'
      responses:
        '200':
          description: successful update operation
          content:
            "*/*":
              schema:
                $ref: '#/components/schemas/ProductOptionGroup'
        '404':
          description: product with provided id not found
      security:
        - jwt_bearer: []
    # Delete a specific option group of a product
    delete:
      tags:
        - product
      summary: Delete a specific product option group of a product
      operationId: deleteProductOptionGroup
      parameters:
        - $ref: '#/components/parameters/identifier'
        - name: group_id
          in: path
          description: id of the option group
          required: true
          schema:
            $ref: '#/components/schemas/RecordId'
      responses:
        '200':
          description: successful delete operation
          content:
            "*/*":
              schema:
                type: object
                properties:
                  id:
                    $ref: '#/components/schemas/RecordId'
                  deleted:
                    type: boolean
                    default: true
      security:
        - jwt_bearer: []
  /product/{identifier}/asset:
    # Set assets set for a product
    put:
      tags:
        - product
        - asset
      summary: Set assets for a product
      description: |
        Replaces all associates for a product with those provided in the request. You may provide an empty request body in order to delete all asset associations. Note that the assets themselves will not be removed, only the link to the product.
      operationId: setProductAssets
      parameters:
        - $ref: '#/components/parameters/identifier'
      requestBody:
        $ref: '#/components/requestBodies/ProductAsset'
      responses:
        '200':
          description: successful update operation
          content:
            '*/*':
              schema:
                type: object
                properties: 
                  success:
                    type: boolean
                    default: true
      security:
        - jwt_bearer: []
    # Add asset to product
    post:
      tags:
        - product
        - asset
      summary: Add asset to product
      description: |
        Associates an asset or list of assets to a product. This request will append to the end of the list by default. You may optionally specify a sort_order value, which will help to control the order that assets are returned in when requesting product data.
      operationId: addProductAsset
      parameters:
        - $ref: '#/components/parameters/identifier'
      requestBody:
        $ref: '#/components/requestBodies/ProductAsset'
      responses:
        '200':
          description: successful update operation
          content:
            '*/*':
              schema:
                type: object
                properties: 
                  success:
                    type: boolean
                    default: true
      security:
        - jwt_bearer: []
  /product/{identifier}/asset/{asset_id}:
    # Remove asset from product
    delete:
      tags:
        - product
        - asset
      summary: Remove asset from product
      description: |
        Removes the association of an asset from a product. This will not delete the asset, only the relationship to the product.

        If you need to delete all assets at once, you can use PUT /v1/products/prod_123/assets ("Set assets for a product") with an empty payload.
      operationId: deleteProductAsset
      parameters:
        - $ref: '#/components/parameters/identifier'
        - name: asset_id
          in: path
          description: id of the asset
          required: true
          schema:
            $ref: '#/components/schemas/RecordId'
      responses:
        '200':
          description: successful update operation
          content:
            '*/*':
              schema:
                type: object
                properties: 
                  deleted:
                    type: boolean
                    default: true
      security:
        - jwt_bearer: []
  ### PRODUCT TYPES & PRODUCT ATTRIBUTES (i.e. non user choosable)
  /product/type:
    # Create Product Type
    post:
      tags:
        - product
        - product_type
      summary: Add a new product type/product class to the store
      operationId: addProductType
      responses:
        '200':
          description: successful add operation
          content:
            "*/*":
              schema:
                $ref: '#/components/schemas/ProductType'
        '405':
          $ref: '#/components/responses/IllegalInput'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      requestBody:
        $ref: '#/components/requestBodies/ProductType'
      security:
        - jwt_bearer: []
    # Get multiple Product Types
    get:
      tags:
        - product
        - product_type
      summary: Get a list of product types/classes
      operationId: getProductTypes
      responses:
        '200':
          description: successful operation
          content:
            "*/*":
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ProductType'
                  meta:
                    type: object
                    properties:
                      pagination:
                        $ref: '#/components/schemas/MetaPagination'
        '405':
          $ref: '#/components/responses/IllegalInput'
  /product/type/{identifier}:
    # Get Product Type
    get:  
      tags:
        - product
        - product_type
      summary: Get a specific product type
      operationId: getProductType
      parameters:
        - $ref: '#/components/parameters/identifier'
      responses:
        '200':
          description: successful get operation
          content:
            "*/*":
              schema:
                $ref: '#/components/schemas/ProductType'
        '404':
          description: product with provided id not found
    # Update Product Type
    put:
      tags:
        - product
        - product_type
      summary: Update a specific product type
      operationId: updateProductType
      parameters:
        - $ref: '#/components/parameters/identifier'
      requestBody:
        $ref: '#/components/requestBodies/ProductType'
      responses:
        '200':
          description: successful update operation
          content:
            "*/*":
              schema:
                $ref: '#/components/schemas/ProductType'
        '404':
          description: product with provided id not found
      security:
        - jwt_bearer: []
    # Delete Product Type
    delete:
      tags:
        - product
        - product_type
      summary: Delete a specific product type
      operationId: deleteProductType
      parameters:
        - $ref: '#/components/parameters/identifier'
      responses:
        '200':
          description: successful delete operation
          content:
            "*/*":
              schema:
                type: object
                properties:
                  id:
                    $ref: '#/components/schemas/RecordId'
                  deleted:
                    type: boolean
                    default: true
      security:
        - jwt_bearer: []
  /product/attribute:
    # Create Product Attribute
    post:
      tags:
        - product
        - product_type
      summary: Add a new product attribute (i.e. attribute = user cannot choose)
      operationId: addProductAttribute
      responses:
        '200':
          description: successful add operation
          content:
            "*/*":
              schema:
                $ref: '#/components/schemas/ProductAttribute'
        '405':
          $ref: '#/components/responses/IllegalInput'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      requestBody:
        $ref: '#/components/requestBodies/ProductAttribute'
      security:
        - jwt_bearer: []
    get:
      tags:
        - product
        - product_type
      summary: Get a list of product attributes
      operationId: getProductAttributes
      parameters:
        - $ref: '#/components/parameters/limit'
        - name: type_id
          in: query
          description: filter by array of product type ids. all values must apply to the product
          required: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/RecordId'
          style: form
          explode: false
      responses:
        '200':
          description: successful operation
          content:
            "*/*":
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ProductAttribute'
                  meta:
                    type: object
                    properties:
                      pagination:
                        $ref: '#/components/schemas/MetaPagination'
        '405':
          $ref: '#/components/responses/IllegalInput'
  /product/attribute/{identifier}:
    # Get Product Attribute
    get:  
      tags:
        - product
        - product_type
      summary: Get a specific product attribute
      operationId: getProductAttribute
      parameters:
        - $ref: '#/components/parameters/identifier'
      responses:
        '200':
          description: successful get operation
          content:
            "*/*":
              schema:
                $ref: '#/components/schemas/ProductAttribute'
        '404':
          description: product with provided id not found
    # Update Product Attribute
    put:
      tags:
        - product
        - product_type
      summary: Update a specific product attribute
      operationId: updateProductAttribute
      parameters:
        - $ref: '#/components/parameters/identifier'
      requestBody:
        $ref: '#/components/requestBodies/ProductAttribute'
      responses:
        '200':
          description: successful update operation
          content:
            "*/*":
              schema:
                $ref: '#/components/schemas/ProductAttribute'
        '404':
          description: product with provided id not found
      security:
        - jwt_bearer: []
    # Delete Product Attribute
    delete:
      tags:
        - product
        - product_type
      summary: Delete a specific product attribute
      operationId: deleteProductAttribute
      parameters:
        - $ref: '#/components/parameters/identifier'
      responses:
        '200':
          description: successful delete operation
          content:
            "*/*":
              schema:
                type: object
                properties:
                  id:
                    $ref: '#/components/schemas/RecordId'
                  deleted:
                    type: boolean
                    default: true
      security:
        - jwt_bearer: []
  ## CATEGORIES
  /category:
    # Create Category
    post:
      tags:
        - category
      summary: Add a new active category to the store
      operationId: addCategory
      responses:
        '200':
          description: successful add operation
          content:
            "*/*":
              schema:
                $ref: '#/components/schemas/Category'
        '405':
          $ref: '#/components/responses/IllegalInput'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      requestBody:
        $ref: '#/components/requestBodies/Category'
      security:
        - jwt_bearer: []
    # Get multiple Categories
    get:
      tags:
        - category
      summary: Get a list of active categories
      operationId: getCategories
      parameters:
        - name: depth
          in: query
          description: The number of children to return, between 0 and 3
          required: false
          schema:
            type: integer
        - name: parent_id
          in: query
          description: Specify a parent category ID to filter by, returning only the children of this category
          required: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/RecordId'
          style: form
          explode: false
      responses:
        '200':
          description: successful operation
          content:
            "*/*":
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Category'
                  meta:
                    type: object
                    properties:
                      pagination:
                        $ref: '#/components/schemas/MetaPagination'
        '405':
          $ref: '#/components/responses/IllegalInput'
  /category/{identifier}:
    # Get Category
    get:
      tags:
        - category
      summary: Get a specific category
      operationId: getCategory
      parameters:
        - $ref: '#/components/parameters/identifier'
      responses:
        '200':
          description: successful get operation
          content:
            "*/*":
              schema:
                $ref: '#/components/schemas/Category'
        '404':
          description: product with provided id not found
    # Update Category
    put:
      tags:
        - category
      summary: Update a specific category
      operationId: updateCategory
      parameters:
        - $ref: '#/components/parameters/identifier'
      requestBody:
        $ref: '#/components/requestBodies/Category'
      responses:
        '200':
          description: successful update operation
          content:
            "*/*":
              schema:
                $ref: '#/components/schemas/Category'
        '404':
          description: product with provided id not found
      security:
        - jwt_bearer: []
    # Delete Category
    delete:
      tags:
        - category
      summary: Delete a specific product category
      operationId: deleteCategory
      parameters:
        - $ref: '#/components/parameters/identifier'
      responses:
        '200':
          description: successful delete operation
          content:
            "*/*":
              schema:
                type: object
                properties:
                  id:
                    $ref: '#/components/schemas/RecordId'
                  deleted:
                    type: boolean
                    default: true
      security:
        - mcje_auth:
          - "create:products"
          - "update:products"
          - "delete:products"
  ## ASSETS
  /asset:
    # Create Asset
    post:
      tags:
        - asset
      summary: Create a new asset
      description: |
        Creates a new asset. You may provide either a base 64 encoded contents argument with the asset's file content, or a url argument with a remote URL for us to download your asset from. Additional metadata may be provided under the data key. 
        
        If both the contents and url arguments are provided, contents will be used. 
        
        Possible extensions: JPG, PNG, GIF, ICO, PDF, DOC(X), PPT(X), ODT, XLS(X), MP3, M4A, OGG, WAV, FLAC, MP4, M4V, MOV, WMV, AVI, MPG, OGV, 3GP/3G2, ZIP/RAR
      operationId: addAsset
      responses:
        '200':
          description: successful add operation
          content:
            "*/*":
              schema:
                $ref: '#/components/schemas/Asset'
        '405':
          $ref: '#/components/responses/IllegalInput'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      requestBody:
        $ref: '#/components/requestBodies/Asset'
      security:
        - jwt_bearer: []
    # Get multiple Assets
    get:
      tags:
        - asset
      summary: Get a list of assets
      operationId: getAssets
      parameters:
        - $ref: '#/components/parameters/limit'
        - name: page
          in: query
          description: The page number to return
          required: false
          schema:
            type: integer
            format: uint32
          style: form
          explode: false
      responses:
        '200':
          description: successful operation
          content:
            "*/*":
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Asset'
                  meta:
                    type: object
                    properties:
                      pagination:
                        $ref: '#/components/schemas/MetaPagination'
        '405':
          $ref: '#/components/responses/IllegalInput'
  /asset/{identifier}:
    # Get Asset
    get:
      tags:
        - asset
      summary: Get a specific asset by its ID
      operationId: getAsset
      parameters:
        - $ref: '#/components/parameters/identifier'
      responses:
        '200':
          description: successful get operation
          content:
            "*/*":
              schema:
                $ref: '#/components/schemas/Asset'
        '404':
          description: product with provided id not found
    # Update Asset
    put:
      tags:
        - asset
      summary: Update the details of an asset
      operationId: updateAsset
      parameters:
        - $ref: '#/components/parameters/identifier'
      requestBody:
        $ref: '#/components/requestBodies/Asset'
      responses:
        '200':
          description: successful update operation
          content:
            "*/*":
              schema:
                $ref: '#/components/schemas/Asset'
        '404':
          description: product with provided id not found
      security:
        - jwt_bearer: []
    # Delete Asset
    delete:
      tags:
        - asset
      summary: Delete a specific asset from the system
      operationId: deleteAsset
      parameters:
        - $ref: '#/components/parameters/identifier'
      responses:
        '200':
          description: successful delete operation
          content:
            "*/*":
              schema:
                type: object
                properties:
                  id:
                    $ref: '#/components/schemas/RecordId'
                  deleted:
                    type: boolean
                    default: true
      security:
        - mcje_auth:
          - "create:products"
          - "update:products"
          - "delete:products"
  /store/inventory:
    get:
      tags:
        - store
      summary: Returns pet inventories by status
      description: Returns a map of status codes to quantities
      operationId: getInventory
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
      security:
        - api_key: []
  /store/order:
    post:
      tags:
        - store
      summary: Place an order for a pet
      operationId: placeOrder
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid Order
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
        description: order placed for purchasing the pet
        required: true
  '/store/order/{orderId}':
    get:
      tags:
        - store
      summary: Find purchase order by ID
      description: >-
        For valid response try integer IDs with value >= 1 and <= 10.\ \ Other
        values will generated exceptions
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          description: ID of pet that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
            maximum: 10
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
    delete:
      tags:
        - store
      summary: Delete purchase order by ID
      description: >-
        For valid response try integer IDs with positive integer value.\ \
        Negative or non-integer values will generate API errors
      operationId: deleteOrder
      parameters:
        - name: orderId
          in: path
          description: ID of the order that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      responses:
        default:
          description: successful operation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Created user object
        required: true
  /user/createWithArray:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      operationId: createUsersWithArrayInput
      responses:
        default:
          description: successful operation
      requestBody:
        $ref: '#/components/requestBodies/UserArray'
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      operationId: createUsersWithListInput
      responses:
        default:
          description: successful operation
      requestBody:
        $ref: '#/components/requestBodies/UserArray'
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
            application/xml:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
  '/user/{username}':
    get:
      tags:
        - user
      summary: Get user by user name
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: The name that needs to be fetched. Use user1 for testing.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Updated user object
        required: true
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
components:
  schemas:
    MetaPagination:
      type: object
      properties:
        total:
          type: integer
          format: uint64
        count:  
          type: integer
          format: uint64
        count_per_page:
          type: integer
          format: uint64
        current_page:
          type: integer
          format: uint64
        total_pages:
          type: integer
          format: uint64
        links:
          type: object
    GeneralError:
      type: object
      properties:
        code:
          type: integer
          format: int32
          maxLength: 3
          minLength: 3
        message:
          type: string
    RecordId:
      type: integer
      format: uint64
    Price:
      type: object
      required:
      - raw
      properties:
        raw:
          type: number
          format: double
        formatted:
          type: string
        formatted_with_symbol:
          type: string
        formatted_with_code:
          type: string
    Currency:
      type: object
      required:
      - code
      properties:
        code:
          type: string
        symbol:
          type: string 
    UnixTimestamp:
      type: integer
      format: uint64
    Asset:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/RecordId'
        url:
          type: string
        description:
          type: string
        is_image:
          type: boolean
        filename:
          type: string
        file_size:
          type: integer
          format: uint64
        file_extension:
          type: string
        image_dimensions:
          type: object
          properties:
            width:
              type: integer
              format: uint32
            height:
              type: integer
              format: utin32
        created:
          $ref: '#/components/schemas/UnixTimestamp'
        updated:
          $ref: '#/components/schemas/UnixTimestamp'
    Discount:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/RecordId'
        created:
          $ref: '#/components/schemas/UnixTimestamp'
        code:
          type: string
          minLength: 3
          maxLength: 10
        type:
          type: string
          enum:
          - "percentage"
          - "fixed"
        value:
          type: number
          format: double
        expires_on:
          $ref: '#/components/schemas/UnixTimestamp'
        is_expired:
          type: boolean
        limit_quantity:
          type: boolean
        quantity:
          type: integer
          format: uint32
        description:
          type: string
        product_ids:
          type: array
          items:
            $ref: '#/components/schemas/RecordId'
    LineItem:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/RecordId'
        product_id:
          $ref: '#/components/schemas/RecordId'
        name:
          type: string
        quantity:
          type: integer
          format: uint32
          minimum: 1
          maximum: 10
        price_per_item:
          $ref: '#/components/schemas/Price'
        line_total:
          $ref: '#/components/schemas/Price'
        selected_options:
          type: array
          items:
            type: object
            properties:
              group_id:
                $ref: '#/components/schemas/RecordId'
              group_name:
                type: string
                example: "Color"
              option_id:
                $ref: '#/components/schemas/RecordId'
              option_name:
                type: string
                example: "Red"
              price:
                $ref: '#/components/schemas/Price'
        variant:
          $ref: '#/components/schemas/ProductVariant'
    Cart:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/RecordId'
        created:
          $ref: '#/components/schemas/UnixTimestamp'
        last_updated:
          $ref: '#/components/schemas/UnixTimestamp'
        expires:
          $ref: '#/components/schemas/UnixTimestamp'
        total_items:
          type: integer
          format: uint32
        total_unique_items:
          type: integer
          format: uint32
        subtotal:
          $ref: '#/components/schemas/Price'
        currency:
          $ref: '#/components/schemas/Currency'
        discounts:
          type: array
          items:
            $ref: '#/components/schemas/Discount'
        line_items:
          type: array
          items:
            $ref: '#/components/schemas/LineItem'
    Order:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/RecordId'
        cart_id:
          $ref: '#/components/schemas/RecordId'
        order_reference_id:
          type: string
          minLength: 5
          maxLength: 15
        created:
          $ref: '#/components/schemas/RecordId'
        updated:
          $ref: '#/components/schemas/RecordId'
        status_complete:
          type: boolean
          default: false
        status_payment:
          type: string
          enum:
          - "paid"
          - "not_yet_paid"
        status_fulfillment:
          $ref: '#/components/schemas/Fulfillment/properties/status'
        currency:
          $ref: '#/components/schemas/Currency'
        order_value:
          $ref: '#/components/schemas/Price'
        shipping_address:
          $ref: '#/components/schemas/ShippingAddress'
        billing_address:
          $ref: '#/components/schemas/BillingAddress'
        order_content:
          type: object
          properties:
            line_items:
              type: array
              items:
                $ref: '#/components/schemas/LineItem'
            subtotal:
              $ref: '#/components/schemas/Price'
            discounts:
              type: array
              items:
                $ref: '#/components/schemas/Discount'
            shipping:
              $ref: '#/components/schemas/Fulfillment'
      xml:
        name: Order
    Category:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/RecordId'
        parent_id:
          $ref: '#/components/schemas/RecordId'
        slug:
          type: string
        name:
          type: string
        description:
          type: string
        products_count:
          type: integer
          format: uint32
        created:
          $ref: '#/components/schemas/UnixTimestamp'
        updated:
          $ref: '#/components/schemas/UnixTimestamp'
        assets:
          type: array
          items:
            $ref: '#/components/schemas/Asset'
      xml:
        name: Category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          format: int32
          description: User Status
      xml:
        name: User
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Tag
    Pet:
      type: object
      required:
        - name
        - photoUrls
      properties:
        id:
          type: integer
          format: int64
        category:
          $ref: '#/components/schemas/Category'
        name:
          type: string
          example: doggie
        photoUrls:
          type: array
          xml:
            name: photoUrl
            wrapped: true
          items:
            type: string
        tags:
          type: array
          xml:
            name: tag
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: Pet
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
    Product:
      type: object
      required:
      - categories
      - name
      - base_price
      - is_active
      properties:
        id:
          type: integer
          format: uint64
        created:
          $ref: '#/components/schemas/UnixTimestamp'
        updated:
          $ref: '#/components/schemas/UnixTimestamp'
        categories:
          type: array
          items:
            $ref: '#/components/schemas/Category'
        name:
          type: string
        #sku:
        #  type: string
        description:
          type: string
        base_price:
          $ref: '#/components/schemas/Price'
        is_active:
          type: boolean
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/ProductAttribute'
        option_groups:
          type: array
          items:
            $ref: '#/components/schemas/ProductOptionGroup'
      description: A Schema representing a generic jewelry product
    ProductType:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/RecordId'
        name:
          type: string
          example: "Rings"
        description:
          type: string
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/ProductAttribute'
    ProductAttribute:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/RecordId'
        name:
          type: string
          example: "Material"
        description:
          type: string
        attribute_options:
          type: array
          items:
            $ref: '#/components/schemas/ProductAttributeValue'
        created:
          $ref: '#/components/schemas/UnixTimestamp'
        updated:
          $ref: '#/components/schemas/UnixTimestamp'
    ProductAttributeValue:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/RecordId'
        attribute_value:
          type: string
          example: "Sterling Silver"
        description:
          type: string
        created:
          $ref: '#/components/schemas/UnixTimestamp'
        updated:
          $ref: '#/components/schemas/UnixTimestamp'
    ProductOptionGroup:
      type: object
      required:
        - name
      properties:
        id:
          $ref: '#/components/schemas/RecordId'
        name:
          type: string
          example: "Color"
        created:
          $ref: '#/components/schemas/UnixTimestamp'
        updated:
          $ref: '#/components/schemas/UnixTimestamp'
        options:
          type: array
          items:
            $ref: '#/components/schemas/ProductOption'
    ProductOption:
      type: object
      required:
        - name
      properties:
        id:
          $ref: '#/components/schemas/RecordId'
        name:
          type: string
          example: "Red"
        price:
          $ref: '#/components/schemas/Price'
        assets:
          type: array
          items:
            $ref: '#/components/schemas/Asset'
        created:
          $ref: '#/components/schemas/UnixTimestamp'
        updated:
          $ref: '#/components/schemas/UnixTimestamp'
    ProductVariant:
      type: object
      required:
      - options
      properties:
        id:
          $ref: '#/components/schemas/RecordId'
        sku:
          type: string
        inventory:
          type: integer
          format: uint32
        price:
          $ref: '#/components/schemas/Price'
        description:
          type: string
        created:
          $ref: '#/components/schemas/UnixTimestamp'
        updated:
          $ref: '#/components/schemas/UnixTimestamp'
        options:
          type: array
          items:
            type: object
            properties:
              variant_group:
                $ref: '#/components/schemas/RecordId'
              variant_option:
                $ref: '#/components/schemas/RecordId'
        assets:
          type: array
          items:
            $ref: '#/components/schemas/Asset'
    ShippingAddress:
      allOf:
      - $ref: '#/components/schemas/Address'
      - type: object
        properties:
          receipient_phone:
            type: string
            minLength: 10
            maxLength: 13
    BillingAddress:
      allOf:
      - $ref: '#/components/schemas/Address'
    PaymentInformation:
      type: object
      properties:
        card_number:
          type: string
        card_validthru:
          type: string
        card_name:
          type: string
        card_cvv:
          type: string
    Fulfillment:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/RecordId'
        status:
          type: string
          enum:
          - "handed_off"
          - "delivering"
          - "fulfilled"
        shipped_on:
          type: string
          format: date-time
        carrier:
          type: string
          enum:
          - "ViettelPost"
          - "VNPOST"
        tracking_number:
          type: string
        tracking_url:
          type: string
        price:
          $ref: '#/components/schemas/Price'
    Address:
      type: object
      properties:
        person_name:
          type: string
        street:
          type: string
        ward:
          type: string
        district:
          type: string
        city:
          type: string
        postcode:
          type: string
        country:
          type: string
  requestBodies:
    Pet:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Pet'
        application/xml:
          schema:
            $ref: '#/components/schemas/Pet'
      description: Pet object that needs to be added to the store
      required: true
    UserArray:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
      description: List of user object
      required: true
    Product:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Product'
        application/xml:
          schema:
            $ref: '#/components/schemas/Product'
      description: Product object that needs to be added to the store
      required: true
    ProductOptionGroup:
      content:
        '*/*':
          schema:
            type: object
            properties:
              name:
                type: string
                example: "Color"
              options:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      example: "Red"
                    price_offset:
                      type: number
                      format: double
                    asset_ids:
                      type: array
                      items:
                        $ref: '#/components/schemas/RecordId'
    ProductType:
      content:
        '*/*':
          schema:
            type: object
            properties:
              name:
                type: string
                example: "Rings"
              description:
                type: string
              attribute_ids:
                type: array
                items:
                  $ref: '#/components/schemas/RecordId'
      required: true
    ProductAttribute:
      content:
        '*/*':
          schema:
            type: object
            properties:
              name:
                type: string
                example: "Material"
              description:
                type: string
              attribute_options:
                type: array
                items:
                  type: object
                  properties:
                    attribute_value:
                      type: string
                      example: "Sterling Silver"
                    description:
                      type: string
    ProductAsset:
      content:
        '*/*':
          schema:
            type: object
            properties:
              assets:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      $ref: '#/components/schemas/RecordId'
                    sort_order:
                      type: integer
                      description: Sort order, 1=top
    Asset:
      content:
        '*/*':
          schema:
            type: object
            properties:
              filename:
                type: string
              contents:
                type: string
                format: byte
              url:
                type: string
              image_dimensions:
                $ref: '#/components/schemas/Asset/properties/image_dimensions'
              private:
                type: boolean
      description: Asset object, representing media assets (i.e. images, videos, etc.)
      required: true
    Category:
      content:
        '*/*':
          schema:
            type: object
            properties:
              slug:
                type: string
              name:
                type: string
              description:
                type: string
              assets:
                type: array
                items:
                  $ref: '#/components/schemas/RecordId'
              childs:
                type: array
                items:
                  $ref: '#/components/schemas/RecordId'
              parent_id:
                $ref: '#/components/schemas/RecordId'
      description: Category is a set of related products
      required: true
    Cart:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Cart'
        application/xml:
          schema:
            $ref: '#/components/schemas/Cart'
      description: A temporary set of products, chosen and editable at will by the user
      required: true
    Order:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Order'
        application/xml:
          schema:
            $ref: '#/components/schemas/Order'
      description: A fixed set of products and informations pertaining to the delivery of the order.
      required: true
    Discount:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Discount'
        application/xml:
          schema:
            $ref: '#/components/schemas/Discount'
      description: Discount, to be applied to Products
      required: true
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'http://petstore.swagger.io/oauth/dialog'
          scopes:
            'write:pets': modify pets in your account
            'read:pets': read your pets
    mcje_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'http://petstore.swagger.io/oauth/dialog'
          scopes:
            'create:products': create products in system
            'update:products': update products in system
            'delete:products': delete products in system
    jwt_bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
    api_key:
      type: apiKey
      name: Authorization
      in: header
  parameters:
    identifier:
      name: identifier
      description: record identifier
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/RecordId'
    ifNoneMatch:
      name: if-None-Match
      description: Conditional Create Header, new record is created only if there isn't an existing record at the identifier URL
      in: header
      schema:
        type: string
        example: "*"
    limit:
      name: limit
      description: the maximum number of records that will be returned
      in: query
      required: false
      schema:
        type: integer
        format: uint32
    query:
      name: query
      description: filter by a term that will be matched against the id and name
      in: query
      required: false
      schema:
        type: string
  responses:
    UnauthorizedError:
      description: Authorization Token is missing or invalid
      headers:
        WWW_Authenticate:
          schema:
            type: string
    NotFound:
      description: Entity not found.
    IllegalInput:
      description: Illegal input for operation.
    GeneralError:
      description: General Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GeneralError'